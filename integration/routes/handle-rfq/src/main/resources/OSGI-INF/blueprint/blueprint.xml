<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/blueprint"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
	xsi:schemaLocation="
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
         http://www.osgi.org/xmlns/blueprint-ext/v1.1.0 https://svn.apache.org/repos/asf/aries/tags/blueprint-0.3.1/blueprint-core/src/main/resources/org/apache/aries/blueprint/ext/blueprint-ext.xsd  
  http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/schemas/blueprint/jaxws.xsd
  http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
  http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/spring/camel-blueprint.xsd">


	<!-- Allow the use of system properties -->
	<ext:property-placeholder placeholder-prefix="$["
		placeholder-suffix="]" />

	<cm:property-placeholder
		persistent-id="IntegrationConfigSettings$[runtime.environment]"
		update-strategy="reload">
		<cm:default-properties>
			<cm:property name="incoming.file.directory" value="Incoming" />
			<cm:property name="outgoing.file.directory" value="Outgoing" />
		</cm:default-properties>
	</cm:property-placeholder>


	<!-- This bean defines the routes -->
	<bean id="file2JMSRouteBuilder" class="com.vpn.integration.route.FileToJMSRouteBuilder">
		<property name="incomingFileDirectory" value="${incoming.file.directory}" />
	</bean>

	<bean id="jmsToSplitterToCBRRouteBuilder"
		class="com.vpn.integration.route.JMSToSplitterToCBRRouteBuilder">
		<property name="outputFileDirectory" value="${outgoing.file.directory}" />
	</bean>
	<!-- This bean refers to the connection factory bean exposed by another 
		bundle in an osgi container -->
	<reference id="connectionFactory" interface="javax.jms.ConnectionFactory" />

	<bean id="txManager"
		class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="transactionManager" ref="txManager" />
		<property name="transacted" value="true" />
		<property name="transactedInOut" value="true" />
	</bean>

	<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
		<argument ref="jmsConfig" />
	</bean>

	<bean id="required" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="txManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
	</bean>

	<bean id="requires_new" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="txManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
	</bean>

	<!-- This is the camel context in this route builder creates the route -->
	<camelContext id="context-handle-RFQ"
		xmlns="http://camel.apache.org/schema/blueprint" autoStartup="true">
		<routeBuilder ref="file2JMSRouteBuilder" />
		<routeBuilder ref="jmsToSplitterToCBRRouteBuilder" />
	</camelContext>

</blueprint>
